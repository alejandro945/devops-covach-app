apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mongo-db.fullname" . }}
  labels:
    {{- include "mongo-db.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "mongo-db.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "mongo-db.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "mongo-db.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: mongo
              containerPort: 27017
              protocol: TCP
          envFrom:
          - secretRef:
              name: "{{ .Values.secretName }}"
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /data/db
              name: db 
          #  - mountPath: /data/configdb
          #    name : configdb  
      volumes:
        - name: db # Volumen de almacenamiento
          persistentVolumeClaim:
            claimName: mongo-db-claim
      #  - name: configdb # Hace el configMap, configura la DB
      #    configMap:
      #       name: mongo-init-script-configmap
